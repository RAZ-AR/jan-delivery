// JAN Delivery - Enhanced Geolocation Fix
// This fixes the getCurrentLocation method in CartManager to use reverse geocoding

// Wait for cart to be initialized then override the method
document.addEventListener('DOMContentLoaded', () => {
  if (typeof cart !== 'undefined' && cart.getCurrentLocation) {
    // Store original method
    const originalGetCurrentLocation = cart.getCurrentLocation.bind(cart);
    
    // Override with enhanced version
    cart.getCurrentLocation = async function() {
      if (!navigator.geolocation) {
        utils.showToast('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', 'error');
        return;
      }
      
      this.getLocationBtn.disabled = true;
      this.getLocationBtn.textContent = '–ü–æ–ª—É—á–∞–µ–º...';
      
      navigator.geolocation.getCurrentPosition(
        async (position) => {
          try {
            const { latitude, longitude } = position.coords;
            
            // –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —á–µ—Ä–µ–∑ –æ–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            const addressDetails = await api.reverseGeocode(latitude, longitude);
            
            if (addressDetails && addressDetails.formatted_address) {
              // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å –≤ –ø–æ–ª–µ
              if (this.addressAutocomplete) {
                this.addressAutocomplete.setValue(addressDetails.formatted_address, {
                  coordinates: { latitude, longitude },
                  ...addressDetails
                });
              } else if (this.addressInput) {
                this.addressInput.value = addressDetails.formatted_address;
              }
              
              // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
              this.selectedAddress = {
                text: addressDetails.formatted_address,
                coordinates: { latitude, longitude },
                ...addressDetails
              };
              
              // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–æ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏
              this.checkDeliveryZone(this.selectedAddress);
              
              utils.showToast('–ê–¥—Ä–µ—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω', 'success');
            } else {
              // Fallback - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
              const coordsText = `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${latitude.toFixed(6)}, ${longitude.toFixed(6)}`;
              if (this.addressAutocomplete) {
                this.addressAutocomplete.setValue(coordsText);
              } else if (this.addressInput) {
                this.addressInput.value = coordsText;
              }
              utils.showToast('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ', 'success');
            }
            
          } catch (error) {
            utils.logError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:', error);
            utils.showToast('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞', 'error');
          } finally {
            // –°–±—Ä–æ—Å–∏—Ç—å –∫–Ω–æ–ø–∫—É
            this.getLocationBtn.disabled = false;
            this.getLocationBtn.textContent = 'üìç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
          }
        },
        (error) => {
          utils.logError('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
          let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
          
          switch (error.code) {
            case error.PERMISSION_DENIED:
              errorMessage = '–î–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –∑–∞–ø—Ä–µ—â–µ–Ω';
              break;
            case error.POSITION_UNAVAILABLE:
              errorMessage = '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
              break;
            case error.TIMEOUT:
              errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è';
              break;
          }
          
          utils.showToast(errorMessage, 'error');
          
          // –°–±—Ä–æ—Å–∏—Ç—å –∫–Ω–æ–ø–∫—É
          this.getLocationBtn.disabled = false;
          this.getLocationBtn.textContent = 'üìç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
        },
        {
          enableHighAccuracy: true,
          timeout: 15000,
          maximumAge: 300000
        }
      );
    };
  }
});