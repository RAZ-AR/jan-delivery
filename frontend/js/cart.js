// JAN Delivery - Cart Management
class CartManager {
  constructor() {
    this.items = [];
    this.isLoading = false;
    
    this.loadCartFromStorage();
    this.initElements();
    this.bindEvents();
  }

  initElements() {
    this.cartIndicator = document.getElementById('cart-indicator');
    this.cartCount = document.getElementById('cart-count');
    this.cartItems = document.getElementById('cart-items');
    this.cartSummary = document.getElementById('cart-summary');
    this.cartEmpty = document.getElementById('cart-empty');
    this.subtotal = document.getElementById('subtotal');
    this.deliveryCost = document.getElementById('delivery-cost');
    this.total = document.getElementById('total');
    this.clearCartBtn = document.getElementById('clear-cart');
    this.checkoutBtn = document.getElementById('checkout-btn');
    this.orderModal = document.getElementById('order-modal');
    this.phoneInput = document.getElementById('phone-input');
    this.addressInput = document.getElementById('address-input');
    this.notesInput = document.getElementById('notes-input');
    this.paymentCash = document.getElementById('payment-cash');
    this.paymentCard = document.getElementById('payment-card');
    this.getLocationBtn = document.getElementById('get-location');
    this.confirmOrderBtn = document.getElementById('confirm-order');
    this.zoneWarning = document.getElementById('zone-warning');
    this.waitlistBtn = document.getElementById('waitlist-btn');
    this.addressSuggestions = document.getElementById('address-suggestions');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –∞–¥—Ä–µ—Å–∞
    this.initAddressAutocomplete();
  }

  initAddressAutocomplete() {
    if (this.addressInput && typeof AddressAutocomplete !== 'undefined') {
      this.addressAutocomplete = new AddressAutocomplete(this.addressInput, {
        onSelect: (suggestion) => {
          utils.log('–í—ã–±—Ä–∞–Ω –∞–¥—Ä–µ—Å:', suggestion);
          this.selectedAddress = suggestion;
          this.checkDeliveryZone(suggestion);
        },
        onError: (error) => {
          utils.logError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞:', error);
        }
      });
    }
  }

  bindEvents() {
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ—Ä–∑–∏–Ω—ã
    this.cartIndicator?.addEventListener('click', () => {
      telegram.hapticFeedback('light');
      app.showPage('cart');
    });

    // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    this.clearCartBtn?.addEventListener('click', () => {
      telegram.hapticFeedback('warning');
      this.showClearConfirmation();
    });

    // –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
    this.checkoutBtn?.addEventListener('click', () => {
      telegram.hapticFeedback('light');
      this.showOrderModal();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
    this.cartItems?.addEventListener('click', (e) => {
      const cartItem = e.target.closest('.cart-item');
      if (!cartItem) return;

      const itemId = cartItem.dataset.itemId;

      if (e.target.classList.contains('quantity-btn')) {
        const action = e.target.dataset.action;
        telegram.hapticFeedback('selection');
        
        if (action === 'increase') {
          this.increaseQuantity(itemId);
        } else if (action === 'decrease') {
          this.decreaseQuantity(itemId);
        }
      } else if (e.target.classList.contains('remove-item')) {
        telegram.hapticFeedback('warning');
        this.removeItem(itemId);
      }
    });

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫–∞–∑–∞
    this.orderModal?.addEventListener('click', (e) => {
      if (e.target === this.orderModal || e.target.classList.contains('modal-close')) {
        this.hideOrderModal();
      }
    });

    // –ü–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    this.getLocationBtn?.addEventListener('click', () => {
      telegram.hapticFeedback('light');
      this.getCurrentLocation();
    });

    // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
    this.confirmOrderBtn?.addEventListener('click', () => {
      telegram.hapticFeedback('medium');
      this.confirmOrder();
    });

    // –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è
    this.waitlistBtn?.addEventListener('click', () => {
      telegram.hapticFeedback('light');
      this.addToWaitlist();
    });

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –º–µ–Ω—é –∏–∑ –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω—ã
    document.querySelector('.nav-to-menu')?.addEventListener('click', () => {
      telegram.hapticFeedback('light');
      app.showPage('menu');
    });

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    this.phoneInput?.addEventListener('input', (e) => {
      const formatted = this.formatPhoneInput(e.target.value);
      e.target.value = formatted;
    });

    // –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –ø–æ –ø–µ—Ä–≤–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É)
    this.addressInput?.addEventListener('input', utils.debounce(async (e) => {
      const q = e.target.value.trim();
      if (q.length < 3) return;
      try {
        const result = await api.geocodeAddress(q);
        if (!result) return;
        if (this.addressSuggestions) {
          this.addressSuggestions.innerHTML = '';
          const option = document.createElement('option');
          option.value = result.formatted_address || q;
          this.addressSuggestions.appendChild(option);
        }
      } catch (_) {}
    }, 400));
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
  addItem(item, quantity = 1) {
    const existingItem = this.items.find(cartItem => cartItem.id === item.id);

    if (existingItem) {
      existingItem.quantity += quantity;
    } else {
      this.items.push({
        ...item,
        quantity: quantity
      });
    }

    this.saveCartToStorage();
    this.updateCartDisplay();
    
    utils.log('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É:', item.name, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:', quantity);
  }

  // –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  removeItem(itemId) {
    this.items = this.items.filter(item => item.id !== itemId);
    this.saveCartToStorage();
    this.updateCartDisplay();
    
    utils.showToast('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', 'info');
  }

  // –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  increaseQuantity(itemId) {
    const item = this.items.find(item => item.id === itemId);
    if (item) {
      item.quantity += 1;
      this.saveCartToStorage();
      this.updateCartDisplay();
    }
  }

  // –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  decreaseQuantity(itemId) {
    const item = this.items.find(item => item.id === itemId);
    if (item) {
      if (item.quantity > 1) {
        item.quantity -= 1;
      } else {
        this.removeItem(itemId);
        return;
      }
      this.saveCartToStorage();
      this.updateCartDisplay();
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
  clearCart() {
    this.items = [];
    this.saveCartToStorage();
    this.updateCartDisplay();
    
    utils.showToast('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', 'info');
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
  showClearConfirmation() {
    telegram.showConfirm('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É?', (confirmed) => {
      if (confirmed) {
        this.clearCart();
      }
    });
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
  updateCartDisplay() {
    this.updateCartIndicator();
    this.renderCartItems();
    this.updateCartSummary();
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ—Ä–∑–∏–Ω—ã
  updateCartIndicator() {
    const totalItems = this.getTotalItems();
    
    if (this.cartCount) {
      this.cartCount.textContent = totalItems;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    if (this.cartIndicator) {
      this.cartIndicator.style.display = totalItems > 0 ? 'flex' : 'none';
    }
  }

  // –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
  renderCartItems() {
    if (!this.cartItems) return;

    if (this.items.length === 0) {
      this.showEmptyCart();
      return;
    }

    const cartHTML = this.items.map(item => this.getCartItemHTML(item)).join('');
    this.cartItems.innerHTML = cartHTML;

    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
    if (this.cartSummary) this.cartSummary.classList.remove('hidden');
    if (this.cartEmpty) this.cartEmpty.style.display = 'none';
  }

  // HTML –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
  getCartItemHTML(item) {
    const image = item.image ? 
      `background-image: url('${item.image}')` : 
      '';
    
    const emoji = CONFIG.CATEGORY_IMAGES[item.category?.toLowerCase()] || 'üçΩÔ∏è';
    
    return `
      <div class="cart-item" data-item-id="${item.id}">
        <div class="cart-item-image" style="${image}">
          ${!item.image ? emoji : ''}
        </div>
        <div class="cart-item-content">
          <div class="cart-item-name">${this.escapeHtml(item.name)}</div>
          <div class="cart-item-price">${utils.formatPrice(item.price)} –∑–∞ —à—Ç.</div>
          <div class="cart-item-controls">
            <button class="quantity-btn" data-action="decrease">‚àí</button>
            <span class="quantity">${item.quantity}</span>
            <button class="quantity-btn" data-action="increase">+</button>
            <button class="remove-item">–£–¥–∞–ª–∏—Ç—å</button>
          </div>
        </div>
      </div>
    `;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É
  showEmptyCart() {
    if (this.cartItems) this.cartItems.innerHTML = '';
    if (this.cartSummary) this.cartSummary.classList.add('hidden');
    if (this.cartEmpty) this.cartEmpty.style.display = 'block';
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞
  updateCartSummary() {
    const subtotalAmount = this.getSubtotal();
    const deliveryAmount = this.getDeliveryAmount();
    const totalAmount = subtotalAmount + deliveryAmount;

    if (this.subtotal) this.subtotal.textContent = utils.formatPrice(subtotalAmount);
    if (this.deliveryCost) this.deliveryCost.textContent = utils.formatPrice(deliveryAmount);
    if (this.total) this.total.textContent = utils.formatPrice(totalAmount);

    // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    if (this.checkoutBtn) {
      this.checkoutBtn.disabled = this.items.length === 0;
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫–∞–∑–∞
  showOrderModal() {
    if (this.items.length === 0) {
      utils.showToast('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', 'warning');
      return;
    }

    // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.prefillUserData();
    
    this.orderModal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';

    // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É Telegram
    telegram.showMainButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', () => {
      this.confirmOrder();
    });
  }

  // –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫–∞–∑–∞
  hideOrderModal() {
    this.orderModal.classList.add('hidden');
    document.body.style.overflow = '';
    
    // –°–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É Telegram
    telegram.hideMainButton();
  }

  // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async prefillUserData() {
    const user = telegram.getUser();
    if (!user) return;

    try {
      const userData = await api.getUser(user.id);
      if (userData) {
        if (this.phoneInput && userData.phone) {
          this.phoneInput.value = userData.phone;
        }
        if (this.addressInput && userData.address) {
          this.addressInput.value = userData.address;
        }
      }
    } catch (error) {
      utils.logError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
  getCurrentLocation() {
    if (!navigator.geolocation) {
      utils.showToast('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', 'error');
      return;
    }

    this.getLocationBtn.disabled = true;
    this.getLocationBtn.textContent = '–ü–æ–ª—É—á–∞–µ–º...';

    navigator.geolocation.getCurrentPosition(
      async (position) => {
        try {
          const { latitude, longitude } = position.coords;
          
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
          // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
          if (this.addressInput) {
            this.addressInput.value = `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${latitude.toFixed(6)}, ${longitude.toFixed(6)}`;
          }
          
          utils.showToast('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ', 'success');
        } catch (error) {
          utils.logError('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
          utils.showToast('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞', 'error');
        }
      },
      (error) => {
        utils.logError('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
        utils.showToast('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', 'error');
      },
      {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 60000
      }
    );

    // –°–±—Ä–æ—Å–∏—Ç—å –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      this.getLocationBtn.disabled = false;
      this.getLocationBtn.textContent = 'üìç –ú–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
    }, 2000);
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
  async confirmOrder() {
    if (this.isLoading) return;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const phone = this.phoneInput?.value.trim();
    const address = this.addressInput?.value.trim();

    if (!phone) {
      utils.showToast('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'warning');
      this.phoneInput?.focus();
      return;
    }

    if (!utils.validatePhone(phone)) {
      utils.showToast('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'warning');
      this.phoneInput?.focus();
      return;
    }

    if (!address) {
      utils.showToast('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏', 'warning');
      this.addressInput?.focus();
      return;
    }

    const user = telegram.getUser();
    if (!user) {
      utils.showToast('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', 'error');
      return;
    }

    this.isLoading = true;
    this.setOrderLoading(true);

    try {
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–æ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏
      const inZone = await api.checkDeliveryZone({ address });
      if (!inZone) {
        if (this.zoneWarning) this.zoneWarning.style.display = 'block';
        if (this.waitlistBtn) this.waitlistBtn.style.display = 'inline-block';
        utils.showToast('–ê–¥—Ä–µ—Å –≤–Ω–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏', 'warning');
        return;
      } else {
        if (this.zoneWarning) this.zoneWarning.style.display = 'none';
        if (this.waitlistBtn) this.waitlistBtn.style.display = 'none';
      }

      const payment_method = (this.paymentCard && this.paymentCard.checked) ? 'card' : 'cash';
      // –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
      const orderData = {
        userId: user.id,
        userInfo: {
          first_name: user.first_name,
          last_name: user.last_name,
          username: user.username
        },
        items: this.items,
        total: this.getSubtotal() + this.getDeliveryAmount(),
        address: address,
        phone: phone,
        notes: this.notesInput?.value.trim() || '',
        payment_method
      };

      const order = await api.createOrder(orderData);
      
      if (order) {
        // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
        this.clearCart();
        
        // –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.hideOrderModal();
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤
        app.showPage('orders');
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        if (window.ordersManager) {
          ordersManager.loadOrders();
        }

        utils.showToast('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!', 'success');
        telegram.hapticFeedback('success');
      }
    } catch (error) {
      utils.logError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      utils.showToast('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞', 'error');
      telegram.hapticFeedback('error');
    } finally {
      this.isLoading = false;
      this.setOrderLoading(false);
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è
  async addToWaitlist() {
    try {
      const user = telegram.getUser();
      const ok = await api.addToWaitlist({
        userId: user?.id,
        phone: this.phoneInput?.value.trim() || '',
        address: this.addressInput?.value.trim() || '',
        notes: this.notesInput?.value.trim() || ''
      });
      if (ok) {
        utils.showToast('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è', 'success');
      } else {
        utils.showToast('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å', 'error');
      }
    } catch (e) {
      utils.showToast('–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è', 'error');
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞
  setOrderLoading(loading) {
    if (this.confirmOrderBtn) {
      this.confirmOrderBtn.disabled = loading;
      this.confirmOrderBtn.textContent = loading ? '–û—Ñ–æ—Ä–º–ª—è–µ–º...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑';
    }

    telegram.setMainButtonLoading(loading);
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  formatPhoneInput(value) {
    const cleaned = value.replace(/\D/g, '');
    let formatted = '';

    if (cleaned.length === 0) return '';

    if (cleaned.startsWith('8')) {
      formatted = '+7';
      const rest = cleaned.slice(1);
      if (rest.length > 0) formatted += ` (${rest.slice(0, 3)}`;
      if (rest.length > 3) formatted += `) ${rest.slice(3, 6)}`;
      if (rest.length > 6) formatted += `-${rest.slice(6, 8)}`;
      if (rest.length > 8) formatted += `-${rest.slice(8, 10)}`;
    } else if (cleaned.startsWith('7')) {
      formatted = '+7';
      const rest = cleaned.slice(1);
      if (rest.length > 0) formatted += ` (${rest.slice(0, 3)}`;
      if (rest.length > 3) formatted += `) ${rest.slice(3, 6)}`;
      if (rest.length > 6) formatted += `-${rest.slice(6, 8)}`;
      if (rest.length > 8) formatted += `-${rest.slice(8, 10)}`;
    } else {
      formatted = value;
    }

    return formatted;
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –≤ localStorage
  saveCartToStorage() {
    try {
      localStorage.setItem('jan-delivery-cart', JSON.stringify(this.items));
    } catch (error) {
      utils.logError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:', error);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –∏–∑ localStorage
  loadCartFromStorage() {
    try {
      const saved = localStorage.getItem('jan-delivery-cart');
      if (saved) {
        this.items = JSON.parse(saved);
        utils.log('–ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', this.items.length, '—Ç–æ–≤–∞—Ä–æ–≤');
      }
    } catch (error) {
      utils.logError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
      this.items = [];
    }
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏—è
  getTotalItems() {
    return this.items.reduce((total, item) => total + item.quantity, 0);
  }

  getSubtotal() {
    return this.items.reduce((total, item) => total + (item.price * item.quantity), 0);
  }

  getDeliveryAmount() {
    const subtotal = this.getSubtotal();
    return subtotal >= CONFIG.MIN_ORDER_RSD ? 0 : CONFIG.DELIVERY_COST_BELOW_MIN;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–æ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
  async checkDeliveryZone(addressData) {
    if (!addressData) return;
    
    try {
      let inZone = false;
      
      if (addressData.coordinates) {
        inZone = await api.checkDeliveryZone({
          latitude: addressData.coordinates.latitude,
          longitude: addressData.coordinates.longitude
        });
      } else if (addressData.text) {
        inZone = await api.checkDeliveryZone({ address: addressData.text });
      }
      
      if (inZone) {
        this.zoneWarning.style.display = 'none';
        this.waitlistBtn.style.display = 'none';
      } else {
        this.zoneWarning.style.display = 'block';
        this.waitlistBtn.style.display = 'block';
      }
      
    } catch (error) {
      utils.logError('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏:', error);
    }
  }

  // –£—Ç–∏–ª–∏—Ç—ã
  escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }
}

// –°–æ–∑–¥–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const cart = new CartManager();
