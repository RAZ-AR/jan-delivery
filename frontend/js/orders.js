// JAN Delivery - Orders Management
class OrdersManager {
  constructor() {
    this.orders = [];
    this.isLoading = false;
    
    this.initElements();
    this.bindEvents();
  }

  initElements() {
    this.ordersList = document.getElementById('orders-list');
    this.ordersEmpty = document.getElementById('orders-empty');
  }

  bindEvents() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –∑–∞–∫–∞–∑–∞–º
    this.ordersList?.addEventListener('click', (e) => {
      const orderItem = e.target.closest('.order-item');
      if (orderItem) {
        telegram.hapticFeedback('light');
        this.showOrderDetails(orderItem.dataset.orderId);
      }
    });
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async loadOrders() {
    const user = telegram.getUser();
    if (!user) {
      utils.logError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      this.showEmptyOrders();
      return;
    }

    if (this.isLoading) return;

    this.isLoading = true;
    this.showLoading();

    try {
      this.orders = await api.getUserOrders(user.id);
      this.renderOrders();
      
      utils.log('–ó–∞–∫–∞–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.orders.length);
    } catch (error) {
      utils.logError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
      utils.showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤', 'error');
      this.showError();
    } finally {
      this.isLoading = false;
    }
  }

  // –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
  renderOrders() {
    if (!this.ordersList) return;

    if (this.orders.length === 0) {
      this.showEmptyOrders();
      return;
    }

    const ordersHTML = this.orders.map(order => this.getOrderItemHTML(order)).join('');
    this.ordersList.innerHTML = ordersHTML;

    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
    this.ordersList.style.display = 'block';
    if (this.ordersEmpty) this.ordersEmpty.style.display = 'none';
  }

  // HTML –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞
  getOrderItemHTML(order) {
    const statusText = CONFIG.ORDER_STATUSES[order.status] || order.status;
    const itemsCount = Array.isArray(order.items) ? order.items.length : 0;
    const itemsText = this.getItemsText(itemsCount);
    
    const createdDate = new Date(order.createdAt).toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'short',
      hour: '2-digit',
      minute: '2-digit'
    });

    return `
      <div class="order-item" data-order-id="${order.id}">
        <div class="order-header">
          <div class="order-id">${order.id}</div>
          <div class="order-status order-status-${order.status}">${statusText}</div>
        </div>
        <div class="order-details">
          <div>${itemsText} ‚Ä¢ ${createdDate}</div>
          ${order.address ? `<div>üìç ${this.escapeHtml(order.address)}</div>` : ''}
          ${order.estimatedDelivery ? `<div>‚è±Ô∏è ${order.estimatedDelivery}</div>` : ''}
        </div>
        <div class="order-total">${utils.formatPrice(order.total)}</div>
      </div>
    `;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
  showOrderDetails(orderId) {
    const order = this.orders.find(o => o.id === orderId);
    if (!order) return;

    const itemsList = Array.isArray(order.items) ? 
      order.items.map(item => `${item.name} √ó ${item.quantity}`).join('\n') :
      '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';

    const details = `
üßæ –ó–∞–∫–∞–∑: ${order.id}
üìä –°—Ç–∞—Ç—É—Å: ${CONFIG.ORDER_STATUSES[order.status] || order.status}

üì¶ –¢–æ–≤–∞—Ä—ã:
${itemsList}

üí∞ –°—É–º–º–∞: ${utils.formatPrice(order.total)}
üìç –ê–¥—Ä–µ—Å: ${order.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìÖ –î–∞—Ç–∞: ${new Date(order.createdAt).toLocaleString('ru-RU')}

${order.notes ? `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.notes}` : ''}
${order.estimatedDelivery ? `‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ${order.estimatedDelivery}` : ''}
    `.trim();

    telegram.showAlert(details);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
  showEmptyOrders() {
    if (this.ordersList) this.ordersList.style.display = 'none';
    if (this.ordersEmpty) this.ordersEmpty.style.display = 'block';
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
  showLoading() {
    if (!this.ordersList) return;
    
    this.ordersList.innerHTML = `
      <div style="text-align: center; padding: 48px;">
        <div class="loading-spinner" style="margin: 0 auto 16px;"></div>
        <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã...</p>
      </div>
    `;
    this.ordersList.style.display = 'block';
    if (this.ordersEmpty) this.ordersEmpty.style.display = 'none';
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
  showError() {
    if (!this.ordersList) return;
    
    this.ordersList.innerHTML = `
      <div style="text-align: center; padding: 48px;">
        <div style="font-size: 64px; margin-bottom: 16px;">üòï</div>
        <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
        <p style="color: var(--tg-theme-hint-color); margin-bottom: 24px;">
          –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã
        </p>
        <button onclick="ordersManager.loadOrders()" 
                style="background: var(--primary-color); color: white; border: none; border-radius: 8px; padding: 12px 24px; cursor: pointer;">
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    `;
    this.ordersList.style.display = 'block';
    if (this.ordersEmpty) this.ordersEmpty.style.display = 'none';
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑—ã
  async refreshOrders() {
    await this.loadOrders();
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
  async trackOrder(orderId) {
    try {
      const order = await api.getOrder(orderId);
      if (order) {
        // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–∫–µ
        const index = this.orders.findIndex(o => o.id === orderId);
        if (index !== -1) {
          this.orders[index] = order;
          this.renderOrders();
        }
        return order;
      }
    } catch (error) {
      utils.logError('–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    }
    return null;
  }

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
  startStatusPolling() {
    // –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    this.pollingInterval = setInterval(async () => {
      const activeOrders = this.orders.filter(order => 
        ['pending', 'confirmed', 'cooking', 'ready', 'delivering'].includes(order.status)
      );

      if (activeOrders.length > 0) {
        let hasUpdates = false;
        
        for (const order of activeOrders) {
          const updatedOrder = await this.trackOrder(order.id);
          if (updatedOrder && updatedOrder.status !== order.status) {
            hasUpdates = true;
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            const statusText = CONFIG.ORDER_STATUSES[updatedOrder.status] || updatedOrder.status;
            utils.showToast(`–ó–∞–∫–∞–∑ ${order.id}: ${statusText}`, 'info');
          }
        }

        if (hasUpdates) {
          telegram.hapticFeedback('success');
        }
      }
    }, 30000);
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  stopStatusPolling() {
    if (this.pollingInterval) {
      clearInterval(this.pollingInterval);
      this.pollingInterval = null;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
  getItemsText(count) {
    if (count === 1) return '1 —Ç–æ–≤–∞—Ä';
    if (count >= 2 && count <= 4) return `${count} —Ç–æ–≤–∞—Ä–∞`;
    return `${count} —Ç–æ–≤–∞—Ä–æ–≤`;
  }

  // –§–∏–ª—å—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
  filterOrdersByStatus(status) {
    const filtered = status === 'all' ? 
      this.orders : 
      this.orders.filter(order => order.status === status);
    
    if (filtered.length === 0) {
      this.showEmptyOrders();
    } else {
      const ordersHTML = filtered.map(order => this.getOrderItemHTML(order)).join('');
      this.ordersList.innerHTML = ordersHTML;
      this.ordersList.style.display = 'block';
      if (this.ordersEmpty) this.ordersEmpty.style.display = 'none';
    }
  }

  // –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤
  searchOrders(query) {
    if (!query.trim()) {
      this.renderOrders();
      return;
    }

    const searchResults = this.orders.filter(order => {
      const searchText = `${order.id} ${order.address || ''} ${order.phone || ''}`.toLowerCase();
      return searchText.includes(query.toLowerCase());
    });

    if (searchResults.length === 0) {
      this.ordersList.innerHTML = `
        <div style="text-align: center; padding: 48px;">
          <div style="font-size: 64px; margin-bottom: 16px;">üîç</div>
          <h3>–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
          <p style="color: var(--tg-theme-hint-color);">
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
          </p>
        </div>
      `;
    } else {
      const ordersHTML = searchResults.map(order => this.getOrderItemHTML(order)).join('');
      this.ordersList.innerHTML = ordersHTML;
    }
  }

  // –£—Ç–∏–ª–∏—Ç—ã
  escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
  async updateOrdersDisplay(language) {
    if (this.orders.length === 0) return;

    console.log(`–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —è–∑—ã–∫–∞: ${language}`);

    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º —Å –Ω–æ–≤—ã–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥ –≤ –∑–∞–∫–∞–∑–∞—Ö
    this.renderOrders();
  }
}

// –°–æ–∑–¥–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const ordersManager = new OrdersManager();