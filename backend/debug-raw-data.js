// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
require('dotenv').config({ path: '../.env' });

async function debugRawData() {
  try {
    const googleSheetsService = require('./src/services/googleSheetsService.js');
    
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...');
    
    const data = await googleSheetsService.getSheetData('Menu');
    console.log(`üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${data.length}`);
    
    if (data.length > 0) {
      console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:', data[0]);
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ ID
      const problemIds = ['000028', '000051', '000052', '000053', '000068', '000069'];
      
      console.log('\nüîç –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏:');
      for (let i = 1; i < data.length; i++) {
        const row = data[i];
        const id = row[0]; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º ID –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
        
        if (problemIds.includes(id)) {
          console.log(`\nüö´ –°—Ç—Ä–æ–∫–∞ ${i + 1} (ID: ${id}):`);
          row.forEach((cell, colIndex) => {
            console.log(`   –ö–æ–ª–æ–Ω–∫–∞ ${colIndex}: "${cell}"`);
          });
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
      console.log('\nüìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:');
      const startFrom = Math.max(1, data.length - 5);
      for (let i = startFrom; i < data.length; i++) {
        const row = data[i];
        console.log(`\n–°—Ç—Ä–æ–∫–∞ ${i + 1}:`);
        console.log(`   ID: "${row[0]}"`);
        console.log(`   Title: "${row[5]}"`); // title –æ–±—ã—á–Ω–æ –≤ 5 –∫–æ–ª–æ–Ω–∫–µ
        console.log(`   Category: "${row[1]}"`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

debugRawData();