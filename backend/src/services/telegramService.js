const { Telegraf, Markup } = require('telegraf');

class TelegramService {
  constructor() {
    this.bot = null;
    this.webhookUrl = process.env.TELEGRAM_WEBHOOK_URL;
    this.webAppUrl = process.env.WEB_APP_URL;
    this.adminIds = (process.env.ADMIN_USER_IDS || '').split(',').map(id => id.trim()).filter(Boolean);
    this.initBot();
  }

  initBot() {
    if (!process.env.TELEGRAM_BOT_TOKEN) {
      console.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return;
    }

    this.bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

    // –ö–æ–º–∞–Ω–¥—ã
    this.setupCommands();

    // Webhook
    if (this.webhookUrl) {
      this.bot.telegram.setWebhook(`${this.webhookUrl}/webhook`).then(() => {
        console.log('‚úÖ Telegram webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }).catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', err));
    } else {
      console.warn('‚ö†Ô∏è TELEGRAM_WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  webhookCallback() {
    if (!this.bot) return (req, res) => res.sendStatus(200);
    return this.bot.webhookCallback('/webhook');
  }

  setupCommands() {
    if (!this.bot) return;

    // /start —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞ –∏ WebApp –∫–Ω–æ–ø–∫–æ–π
    this.bot.start(async (ctx) => {
      const firstName = ctx.from?.first_name || 'there';
      const langKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('EN', 'lang_en'), Markup.button.callback('SR', 'lang_sr'), Markup.button.callback('RU', 'lang_ru')],
        [Markup.button.webApp('üçΩÔ∏è Open Menu', this.webAppUrl)]
      ]);

      await ctx.reply(`Welcome, ${firstName}! Choose language and open the menu:`, langKeyboard);
    });

    // –Ø–∑—ã–∫–æ–≤—ã–µ –∫–æ–ª–ª–±–µ–∫–∏ (–¥–µ–º–æ, —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session –Ω–µ –¥–µ–ª–∞–µ–º)
    this.bot.action(/lang_(en|sr|ru)/, async (ctx) => {
      const chosen = ctx.match[1];
      const map = { en: 'English', sr: 'Srpski', ru: '–†—É—Å—Å–∫–∏–π' };
      await ctx.answerCbQuery(`Language set: ${map[chosen]}`);
    });

    // –ê–¥–º–∏–Ω—Å–∫–∞—è —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞: /status <orderId> <status>
    this.bot.hears(/^\/status\s+(\S+)\s+(\S+)/, async (ctx) => {
      if (!this.isAdmin(ctx.from?.id)) return;
      const orderId = ctx.match[1];
      const status = ctx.match[2];
      try {
        // –õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤
        const orderService = require('./orderService');
        const order = await orderService.updateOrderStatus(orderId, status);
        await ctx.reply(`‚úÖ Status updated: ${orderId} ‚Üí ${status}`);
      } catch (e) {
        await ctx.reply(`‚ùå Failed to update: ${e.message}`);
      }
    });

    console.log('‚úÖ Telegram –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (Telegraf)');
  }

  isAdmin(userId) {
    if (!userId) return false;
    return this.adminIds.includes(String(userId));
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async sendOrderNotification(userId, orderData) {
    if (!this.bot) return;
    try {
      const message = `üéâ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n` +
        `üìã –ó–∞–∫–∞–∑ #${orderData.id}\n` +
        `üí∞ –°—É–º–º–∞: ${orderData.total} RSD\n` +
        `üìç –ê–¥—Ä–µ—Å: ${orderData.address}\n` +
        `‚è±Ô∏è –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${orderData.estimatedDelivery}`;
      await this.bot.telegram.sendMessage(userId, message);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', e.message);
    }
  }

  async sendStatusUpdate(userId, orderData) {
    if (!this.bot) return;
    try {
      const statusMessages = {
        'confirmed': '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è',
        'cooking': 'üë®‚Äçüç≥ –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è',
        'ready': 'üì¶ –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∏ –ø–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É',
        'delivering': 'üöó –ö—É—Ä—å–µ—Ä —É–∂–µ –≤ –ø—É—Ç–∏ –∫ –≤–∞–º',
        'delivered': 'üéâ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!'
      };
      const message = `üìã –ó–∞–∫–∞–∑ #${orderData.id}\n${statusMessages[orderData.status] || '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω'}`;
      await this.bot.telegram.sendMessage(userId, message);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', e.message);
    }
  }
}

module.exports = new TelegramService();

