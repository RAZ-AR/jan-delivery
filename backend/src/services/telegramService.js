const { Telegraf, Markup } = require('telegraf');

class TelegramService {
  constructor() {
    this.bot = null;
    this.webhookUrl = process.env.TELEGRAM_WEBHOOK_URL;
    this.webAppUrl = process.env.WEB_APP_URL;
    this.groupChatId = process.env.TELEGRAM_GROUP_CHAT_ID;
    this.adminIds = (process.env.ADMIN_USER_IDS || '').split(',').map(id => id.trim()).filter(Boolean);
    this.initBot();
  }

  initBot() {
    if (!process.env.TELEGRAM_BOT_TOKEN) {
      console.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return;
    }

    this.bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

    // –ö–æ–º–∞–Ω–¥—ã
    this.setupCommands();

    // Webhook
    if (this.webhookUrl) {
      this.bot.telegram.setWebhook(`${this.webhookUrl}/webhook`).then(() => {
        console.log('‚úÖ Telegram webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }).catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', err));
    } else {
      console.warn('‚ö†Ô∏è TELEGRAM_WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  webhookCallback() {
    if (!this.bot) return (req, res) => res.sendStatus(200);
    return this.bot.webhookCallback('/webhook');
  }

  setupCommands() {
    if (!this.bot) return;

    // /start —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞ –∏ WebApp –∫–Ω–æ–ø–∫–æ–π
    this.bot.start(async (ctx) => {
      const firstName = ctx.from?.first_name || 'there';
      const langKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('EN', 'lang_en'), Markup.button.callback('SR', 'lang_sr'), Markup.button.callback('RU', 'lang_ru')],
        [Markup.button.webApp('üçΩÔ∏è Open Menu', this.webAppUrl)]
      ]);

      await ctx.reply(`Welcome, ${firstName}! Choose language and open the menu:`, langKeyboard);
    });

    // –Ø–∑—ã–∫–æ–≤—ã–µ –∫–æ–ª–ª–±–µ–∫–∏ (–¥–µ–º–æ, —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session –Ω–µ –¥–µ–ª–∞–µ–º)
    this.bot.action(/lang_(en|sr|ru)/, async (ctx) => {
      const chosen = ctx.match[1];
      const map = { en: 'English', sr: 'Srpski', ru: '–†—É—Å—Å–∫–∏–π' };
      await ctx.answerCbQuery(`Language set: ${map[chosen]}`);
    });

    // –ê–¥–º–∏–Ω—Å–∫–∞—è —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞: /status <orderId> <status>
    this.bot.hears(/^\/status\s+(\S+)\s+(\S+)/, async (ctx) => {
      if (!this.isAdmin(ctx.from?.id)) return;
      const orderId = ctx.match[1];
      const status = ctx.match[2];
      try {
        // –õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤
        const orderService = require('./orderService');
        const order = await orderService.updateOrderStatus(orderId, status);
        await ctx.reply(`‚úÖ Status updated: ${orderId} ‚Üí ${status}`);
      } catch (e) {
        await ctx.reply(`‚ùå Failed to update: ${e.message}`);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
    this.bot.action(/^(confirm|cancel|cooking|delivering|delivered)_(.+)$/, async (ctx) => {
      try {
        const action = ctx.match[1];
        const orderId = ctx.match[2];
        
        // –ú–∞–ø–ø–∏–Ω–≥ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Å—Ç–∞—Ç—É—Å—ã
        const statusMap = {
          'confirm': 'confirmed',
          'cancel': 'cancelled',
          'cooking': 'cooking',
          'delivering': 'delivering',
          'delivered': 'delivered'
        };
        
        const status = statusMap[action];
        if (!status) {
          await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
          return;
        }
        
        // –õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–æ–≤
        const orderService = require('./orderService');
        await orderService.updateOrderStatus(orderId, status);
        
        const actionMessages = {
          'confirm': '‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
          'cancel': '‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω',
          'cooking': 'üë®‚Äçüç≥ –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è',
          'delivering': 'üöó –ó–∞–∫–∞–∑ –≤ –ø—É—Ç–∏',
          'delivered': '‚úÖ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
        };
        
        await ctx.answerCbQuery(actionMessages[action]);
        await ctx.editMessageText(
          ctx.callbackQuery.message.text + `\n\nüîÑ ${actionMessages[action]} (${ctx.from.first_name})`
        );
        
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–∞:', e.message);
        await ctx.answerCbQuery(`‚ùå –û—à–∏–±–∫–∞: ${e.message}`);
      }
    });

    console.log('‚úÖ Telegram –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (Telegraf)');
  }

  isAdmin(userId) {
    if (!userId) return false;
    return this.adminIds.includes(String(userId));
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async sendOrderNotification(userId, orderData) {
    if (!this.bot) return;
    try {
      const message = `üéâ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n` +
        `üìã –ó–∞–∫–∞–∑ #${orderData.id}\n` +
        `üí∞ –°—É–º–º–∞: ${orderData.total} RSD\n` +
        `üìç –ê–¥—Ä–µ—Å: ${orderData.address}\n` +
        `‚è±Ô∏è –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${orderData.estimatedDelivery}`;
      await this.bot.telegram.sendMessage(userId, message);
      
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
      await this.sendOrderToGroup(orderData);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', e.message);
    }
  }

  async sendStatusUpdate(userId, orderData) {
    if (!this.bot) return;
    try {
      const statusMessages = {
        'confirmed': '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è',
        'cooking': 'üë®‚Äçüç≥ –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è',
        'ready': 'üì¶ –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∏ –ø–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É',
        'delivering': 'üöó –ö—É—Ä—å–µ—Ä —É–∂–µ –≤ –ø—É—Ç–∏ –∫ –≤–∞–º',
        'delivered': 'üéâ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!'
      };
      const message = `üìã –ó–∞–∫–∞–∑ #${orderData.id}\n${statusMessages[orderData.status] || '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω'}`;
      await this.bot.telegram.sendMessage(userId, message);
      
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –≥—Ä—É–ø–ø—É
      if (this.groupChatId) {
        const groupMessage = `üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω\n\nüìã –ó–∞–∫–∞–∑ #${orderData.id}\nüìä –°—Ç–∞—Ç—É—Å: ${statusMessages[orderData.status] || orderData.status}`;
        await this.bot.telegram.sendMessage(this.groupChatId, groupMessage);
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', e.message);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É
  async sendOrderToGroup(orderData) {
    if (!this.bot || !this.groupChatId) return;
    
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
      const items = Array.isArray(orderData.items) ? orderData.items : [];
      const itemsList = items.map(item => `‚Ä¢ ${item.name} x${item.quantity} - ${item.price * item.quantity} RSD`).join('\n');
      
      const userInfo = orderData.userInfo || {};
      const userName = userInfo.first_name ? `${userInfo.first_name} ${userInfo.last_name || ''}`.trim() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      const groupMessage = `üÜï –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\n` +
        `üìã –ó–∞–∫–∞–∑: #${orderData.id}\n` +
        `üë§ –ö–ª–∏–µ–Ω—Ç: ${userName}\n` +
        `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üìç –ê–¥—Ä–µ—Å: ${orderData.address}\n\n` +
        `üõí –ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞:\n${itemsList}\n\n` +
        `üí∞ –ò—Ç–æ–≥–æ: ${orderData.total} RSD\n` +
        `üí≥ –û–ø–ª–∞—Ç–∞: ${orderData.payment_method === 'card' ? '–ö–∞—Ä—Ç–æ–π' : '–ù–∞–ª–∏—á–Ω—ã–º–∏'}\n` +
        `‚è±Ô∏è –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${orderData.estimatedDelivery}\n` +
        `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${orderData.notes || '–ù–µ—Ç'}\n\n` +
        `üìä –°—Ç–∞—Ç—É—Å: ‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è`;

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `confirm_${orderData.id}`),
          Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', `cancel_${orderData.id}`)
        ],
        [
          Markup.button.callback('üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è', `cooking_${orderData.id}`),
          Markup.button.callback('üöó –í –ø—É—Ç–∏', `delivering_${orderData.id}`)
        ],
        [
          Markup.button.callback('‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω', `delivered_${orderData.id}`)
        ]
      ]);

      await this.bot.telegram.sendMessage(this.groupChatId, groupMessage, keyboard);
      console.log(`‚úÖ –ó–∞–∫–∞–∑ #${orderData.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É`);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ –≥—Ä—É–ø–ø—É:', e.message);
    }
  }
}

module.exports = new TelegramService();

