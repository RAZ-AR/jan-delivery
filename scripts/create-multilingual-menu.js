#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é –≤ Google Sheets
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/create-multilingual-menu.js
 */

const { GoogleAuth } = require('google-auth-library');
const { google } = require('googleapis');
require('dotenv').config();

class MultilingualMenuSetup {
  constructor() {
    this.auth = new GoogleAuth({
      keyFile: process.env.GOOGLE_SERVICE_ACCOUNT_KEY_FILE,
      scopes: ['https://www.googleapis.com/spreadsheets'],
    });
    
    this.spreadsheetId = process.env.GOOGLE_SPREADSHEET_ID;
    this.sheetName = 'Menu';
  }

  async init() {
    console.log('üåç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é...');
    
    try {
      const sheets = google.sheets({ version: 'v4', auth: this.auth });
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      const currentData = await this.getCurrentData(sheets);
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å —è–∑—ã–∫–æ–≤—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
      const newStructure = this.createMultilingualStructure(currentData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
      await this.updateSheet(sheets, newStructure);
      
      console.log('‚úÖ –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
      console.log('üìã –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ Google Sheets');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    }
  }

  async getCurrentData(sheets) {
    console.log('üìñ –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ...');
    
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: this.spreadsheetId,
      range: `${this.sheetName}!A:Z`,
    });

    return response.data.values || [];
  }

  createMultilingualStructure(currentData) {
    console.log('üîß –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É...');
    
    // –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const newHeaders = [
      'id',
      'category', 
      'title',          // –†—É—Å—Å–∫–∏–π
      'title_en',       // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
      'title_sr',       // –°–µ—Ä–±—Å–∫–∏–π
      'description',    // –†—É—Å—Å–∫–∏–π
      'description_en', // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
      'description_sr', // –°–µ—Ä–±—Å–∫–∏–π
      'price',
      'weight',
      'image',
      'available',
      'ingredients',
      'calories'
    ];

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (currentData.length === 0) {
      return [newHeaders, this.createSampleData()];
    }

    const result = [newHeaders];
    const oldHeaders = currentData[0] || [];
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç–æ–ª–±—Ü–∞
    const getColumnIndex = (name) => {
      return oldHeaders.findIndex(header => 
        String(header).toLowerCase().includes(name.toLowerCase())
      );
    };

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    for (let i = 1; i < currentData.length; i++) {
      const row = currentData[i] || [];
      
      const newRow = [
        row[getColumnIndex('id')] || row[0] || '',
        row[getColumnIndex('category')] || row[4] || '',
        row[getColumnIndex('title')] || row[1] || '', // –†—É—Å—Å–∫–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª
        '', // title_en - –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å
        '', // title_sr - –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å
        row[getColumnIndex('description')] || row[2] || '', // –†—É—Å—Å–∫–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª
        '', // description_en - –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å
        '', // description_sr - –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å
        row[getColumnIndex('price')] || row[3] || '0',
        row[getColumnIndex('weight')] || row[8] || '',
        row[getColumnIndex('image')] || row[5] || '',
        row[getColumnIndex('available')] || row[6] || 'TRUE',
        row[getColumnIndex('ingredients')] || row[7] || '',
        row[getColumnIndex('calories')] || row[9] || ''
      ];

      result.push(newRow);
    }

    return result;
  }

  createSampleData() {
    return [
      [
        '1',
        '–®–∞—à–ª—ã–∫',
        '–®–∞—à–ª—ã–∫ —Å–≤–∏–Ω–æ–π',
        'Pork Shashlik',
        '–°–≤–∏—ö—Å–∫–∏ —à–∞—à–ª–∏–∫',
        '–°–æ—á–Ω—ã–π —à–∞—à–ª—ã–∫ –∏–∑ —Å–≤–∏–Ω–∏–Ω—ã –Ω–∞ —É–≥–ª—è—Ö',
        'Juicy pork shashlik grilled on coals',
        '–°–æ—á–∞–Ω —Å–≤–∏—ö—Å–∫–∏ —à–∞—à–ª–∏–∫ –ø–µ—á–µ–Ω –Ω–∞ —Ä–æ—à—Ç–∏—ô—É',
        '100',
        '200–≥',
        '',
        'TRUE',
        '—Å–≤–∏–Ω–∏–Ω–∞, —Å–ø–µ—Ü–∏–∏',
        '450'
      ],
      [
        '2',
        '–õ—é–ª—è-–∫–µ–±–∞–±',
        '–õ—é–ª—è –≥–æ–≤—è–∂–∏–π',
        'Beef Kebab',
        '–ì–æ–≤–µ—í–∏ –∫–µ–±–∞–±',
        '–ê—Ä–æ–º–∞—Ç–Ω—ã–π –∫–µ–±–∞–± –∏–∑ –≥–æ–≤—è–¥–∏–Ω—ã',
        'Aromatic beef kebab with spices',
        '–ê—Ä–æ–º–∞—Ç–∏—á–∞–Ω –≥–æ–≤–µ—í–∏ –∫–µ–±–∞–± —Å–∞ –∑–∞—á–∏–Ω–∏–º–∞',
        '120',
        '180–≥',
        '',
        'TRUE',
        '–≥–æ–≤—è–¥–∏–Ω–∞, –ª—É–∫, –∑–µ–ª–µ–Ω—å',
        '380'
      ],
      [
        '3',
        '–†—ã–±–∞',
        '–§–æ—Ä–µ–ª—å –≥—Ä–∏–ª—å',
        'Grilled Trout',
        '–ü–∞—Å—Ç—Ä–º–∫–∞ —Å–∞ —Ä–æ—à—Ç–∏—ô–∞',
        '–°–≤–µ–∂–∞—è —Ñ–æ—Ä–µ–ª—å –Ω–∞ –≥—Ä–∏–ª–µ',
        'Fresh grilled trout with herbs',
        '–°–≤–µ–∂–∞ –ø–∞—Å—Ç—Ä–º–∫–∞ —Å–∞ —Ä–æ—à—Ç–∏—ô–∞ —Å–∞ –∑–∞—á–∏–Ω–∏–º–∞',
        '150',
        '250–≥',
        '',
        'TRUE',
        '—Ñ–æ—Ä–µ–ª—å, –ª–∏–º–æ–Ω, —Ç—Ä–∞–≤—ã',
        '280'
      ]
    ];
  }

  async updateSheet(sheets, data) {
    console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É...');
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    await sheets.spreadsheets.values.clear({
      spreadsheetId: this.spreadsheetId,
      range: `${this.sheetName}!A:Z`,
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await sheets.spreadsheets.values.update({
      spreadsheetId: this.spreadsheetId,
      range: `${this.sheetName}!A1`,
      valueInputOption: 'USER_ENTERED',
      resource: {
        values: data,
      },
    });

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    await this.formatHeaders(sheets);
  }

  async formatHeaders(sheets) {
    console.log('üé® –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏...');
    
    try {
      await sheets.spreadsheets.batchUpdate({
        spreadsheetId: this.spreadsheetId,
        resource: {
          requests: [
            {
              repeatCell: {
                range: {
                  sheetId: 0, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ Menu - –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
                  startRowIndex: 0,
                  endRowIndex: 1,
                  startColumnIndex: 0,
                  endColumnIndex: 14,
                },
                cell: {
                  userEnteredFormat: {
                    backgroundColor: {
                      red: 0.13,
                      green: 0.22,
                      blue: 0.44,
                    },
                    textFormat: {
                      foregroundColor: {
                        red: 1.0,
                        green: 1.0,
                        blue: 1.0,
                      },
                      fontSize: 12,
                      bold: true,
                    },
                  },
                },
                fields: 'userEnteredFormat(backgroundColor,textFormat)',
              },
            },
            {
              autoResizeDimensions: {
                dimensions: {
                  sheetId: 0,
                  dimension: 'COLUMNS',
                  startIndex: 0,
                  endIndex: 14,
                },
              },
            },
          ],
        },
      });
    } catch (error) {
      console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  const setup = new MultilingualMenuSetup();
  setup.init();
}

module.exports = MultilingualMenuSetup;