#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/test-sheets.js
 */

require('dotenv').config();
const { google } = require('googleapis');

class SheetsTestRunner {
  constructor() {
    this.sheets = null;
    this.spreadsheetId = process.env.GOOGLE_SHEETS_ID;
    this.testResults = [];
  }

  async init() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets...\n');

    try {
      const auth = new google.auth.GoogleAuth({
        credentials: {
          client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
          private_key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n')
        },
        scopes: ['https://www.googleapis.com/auth/spreadsheets']
      });

      this.sheets = google.sheets({ version: 'v4', auth });
      this.addResult('‚úÖ Google Sheets API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return true;
    } catch (error) {
      this.addResult(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
      return false;
    }
  }

  async testConnection() {
    console.log('üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...\n');

    try {
      const response = await this.sheets.spreadsheets.get({
        spreadsheetId: this.spreadsheetId
      });

      this.addResult(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ: "${response.data.properties.title}"`);
      this.addResult(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤: ${response.data.sheets.length}`);
      
      const sheetNames = response.data.sheets.map(sheet => sheet.properties.title);
      this.addResult(`üìã –õ–∏—Å—Ç—ã: ${sheetNames.join(', ')}`);
      
      return { success: true, sheets: sheetNames };
    } catch (error) {
      this.addResult(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
      return { success: false, error: error.message };
    }
  }

  async testMenuSheet() {
    console.log('üçï –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ Menu...\n');

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      const headersResponse = await this.sheets.spreadsheets.values.get({
        spreadsheetId: this.spreadsheetId,
        range: 'Menu!A1:J1'
      });

      if (!headersResponse.data.values || headersResponse.data.values.length === 0) {
        this.addResult('‚ö†Ô∏è  –õ–∏—Å—Ç Menu –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏');
        return false;
      }

      const headers = headersResponse.data.values[0];
      const expectedHeaders = ['id', 'name', 'description', 'price', 'category', 'image', 'available', 'ingredients', 'weight', 'calories'];
      
      this.addResult(`üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏ Menu: ${headers.join(', ')}`);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      const missingHeaders = expectedHeaders.filter(h => !headers.includes(h));
      if (missingHeaders.length > 0) {
        this.addResult(`‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏: ${missingHeaders.join(', ')}`);
      } else {
        this.addResult('‚úÖ –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ Menu –Ω–∞ –º–µ—Å—Ç–µ');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      const dataResponse = await this.sheets.spreadsheets.values.get({
        spreadsheetId: this.spreadsheetId,
        range: 'Menu!A2:J100'
      });

      const menuItems = dataResponse.data.values || [];
      this.addResult(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥ –≤ –º–µ–Ω—é: ${menuItems.length}`);

      if (menuItems.length > 0) {
        // –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const categories = [...new Set(menuItems.map(item => item[4]).filter(Boolean))];
        this.addResult(`üè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categories.join(', ')}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        let validItems = 0;
        let invalidItems = [];

        menuItems.forEach((item, index) => {
          const rowNum = index + 2;
          if (item[0] && item[1] && item[3] && item[4]) { // id, name, price, category
            validItems++;
          } else {
            invalidItems.push(rowNum);
          }
        });

        this.addResult(`‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${validItems}`);
        if (invalidItems.length > 0) {
          this.addResult(`‚ö†Ô∏è  –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: ${invalidItems.join(', ')}`);
        }
      }

      return true;
    } catch (error) {
      this.addResult(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Menu: ${error.message}`);
      return false;
    }
  }

  async testOrdersSheet() {
    console.log('üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ Orders...\n');

    try {
      const headersResponse = await this.sheets.spreadsheets.values.get({
        spreadsheetId: this.spreadsheetId,
        range: 'Orders!A1:L1'
      });

      if (!headersResponse.data.values || headersResponse.data.values.length === 0) {
        this.addResult('‚ö†Ô∏è  –õ–∏—Å—Ç Orders –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏');
        return false;
      }

      const headers = headersResponse.data.values[0];
      const expectedHeaders = ['id', 'userId', 'userInfo', 'items', 'total', 'address', 'coordinates', 'status', 'createdAt', 'estimatedDelivery', 'phone', 'notes'];
      
      this.addResult(`üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏ Orders: ${headers.join(', ')}`);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      const missingHeaders = expectedHeaders.filter(h => !headers.includes(h));
      if (missingHeaders.length > 0) {
        this.addResult(`‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏: ${missingHeaders.join(', ')}`);
      } else {
        this.addResult('‚úÖ –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ Orders –Ω–∞ –º–µ—Å—Ç–µ');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      const dataResponse = await this.sheets.spreadsheets.values.get({
        spreadsheetId: this.spreadsheetId,
        range: 'Orders!A2:L100'
      });

      const orders = dataResponse.data.values || [];
      this.addResult(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}`);

      if (orders.length > 0) {
        // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤
        const statuses = [...new Set(orders.map(order => order[7]).filter(Boolean))];
        this.addResult(`üìã –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤: ${statuses.join(', ')}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ JSON –ø–æ–ª–µ–π
        let validJsonCount = 0;
        orders.forEach((order, index) => {
          try {
            if (order[2]) JSON.parse(order[2]); // userInfo
            if (order[3]) JSON.parse(order[3]); // items
            if (order[6]) JSON.parse(order[6]); // coordinates
            validJsonCount++;
          } catch (e) {
            this.addResult(`‚ö†Ô∏è  –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ —Å—Ç—Ä–æ–∫–µ ${index + 2}`);
          }
        });

        this.addResult(`‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö JSON –∑–∞–ø–∏—Å–µ–π: ${validJsonCount}/${orders.length}`);
      }

      return true;
    } catch (error) {
      this.addResult(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Orders: ${error.message}`);
      return false;
    }
  }

  async testUsersSheet() {
    console.log('üë• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ Users...\n');

    try {
      const headersResponse = await this.sheets.spreadsheets.values.get({
        spreadsheetId: this.spreadsheetId,
        range: 'Users!A1:I1'
      });

      if (!headersResponse.data.values || headersResponse.data.values.length === 0) {
        this.addResult('‚ö†Ô∏è  –õ–∏—Å—Ç Users –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏');
        return false;
      }

      const headers = headersResponse.data.values[0];
      const expectedHeaders = ['userId', 'first_name', 'last_name', 'username', 'language_code', 'phone', 'address', 'createdAt', 'updatedAt'];
      
      this.addResult(`üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏ Users: ${headers.join(', ')}`);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      const missingHeaders = expectedHeaders.filter(h => !headers.includes(h));
      if (missingHeaders.length > 0) {
        this.addResult(`‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏: ${missingHeaders.join(', ')}`);
      } else {
        this.addResult('‚úÖ –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ Users –Ω–∞ –º–µ—Å—Ç–µ');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      const dataResponse = await this.sheets.spreadsheets.values.get({
        spreadsheetId: this.spreadsheetId,
        range: 'Users!A2:I100'
      });

      const users = dataResponse.data.values || [];
      this.addResult(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

      if (users.length > 0) {
        // –ê–Ω–∞–ª–∏–∑ —è–∑—ã–∫–æ–≤
        const languages = [...new Set(users.map(user => user[4]).filter(Boolean))];
        this.addResult(`üåê –Ø–∑—ã–∫–∏: ${languages.join(', ')}`);

        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏
        const usersWithPhones = users.filter(user => user[5]).length;
        this.addResult(`üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏: ${usersWithPhones}/${users.length}`);
      }

      return true;
    } catch (error) {
      this.addResult(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Users: ${error.message}`);
      return false;
    }
  }

  async testWriteOperation() {
    console.log('‚úèÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏...\n');

    try {
      // –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –ª–∏—Å—Ç Menu
      const testMenuData = [
        ['test001', '–¢–µ—Å—Ç–æ–≤–æ–µ –±–ª—é–¥–æ', '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–ª—é–¥–∞', 999, '—Ç–µ—Å—Ç', '', 'FALSE', '—Ç–µ—Å—Ç–æ–≤—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', '100–≥', 100]
      ];

      await this.sheets.spreadsheets.values.append({
        spreadsheetId: this.spreadsheetId,
        range: 'Menu!A:J',
        valueInputOption: 'USER_ENTERED',
        resource: { values: testMenuData }
      });

      this.addResult('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ Menu —É—Å–ø–µ—à–Ω–∞');

      // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
      const menuData = await this.sheets.spreadsheets.values.get({
        spreadsheetId: this.spreadsheetId,
        range: 'Menu!A:A'
      });

      const menuRows = menuData.data.values || [];
      const testRowIndex = menuRows.findIndex(row => row[0] === 'test001');

      if (testRowIndex > 0) {
        await this.sheets.spreadsheets.values.clear({
          spreadsheetId: this.spreadsheetId,
          range: `Menu!A${testRowIndex + 1}:J${testRowIndex + 1}`
        });
        this.addResult('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
      }

      return true;
    } catch (error) {
      this.addResult(`‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏: ${error.message}`);
      return false;
    }
  }

  addResult(message) {
    this.testResults.push(message);
    console.log(message);
  }

  printSummary() {
    console.log('\n' + '='.repeat(50));
    console.log('üìã –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log('='.repeat(50));
    
    const successful = this.testResults.filter(r => r.startsWith('‚úÖ')).length;
    const warnings = this.testResults.filter(r => r.startsWith('‚ö†Ô∏è')).length;
    const errors = this.testResults.filter(r => r.startsWith('‚ùå')).length;

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successful}`);
    console.log(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${warnings}`);
    console.log(`‚ùå –û—à–∏–±–∫–∏: ${errors}`);

    if (errors === 0) {
      console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
      console.log('–í–∞—à–∞ Google Sheets –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.');
    } else {
      console.log('\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫.');
      console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã.');
    }
  }

  async run() {
    console.log('üìä JAN Delivery - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Sheets');
    console.log('='.repeat(50) + '\n');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!process.env.GOOGLE_SHEETS_ID) {
      console.log('‚ùå GOOGLE_SHEETS_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
      return;
    }

    if (!process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL) {
      console.log('‚ùå GOOGLE_SERVICE_ACCOUNT_EMAIL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
      return;
    }

    if (!process.env.GOOGLE_PRIVATE_KEY) {
      console.log('‚ùå GOOGLE_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
      return;
    }

    const initSuccess = await this.init();
    if (!initSuccess) {
      this.printSummary();
      return;
    }

    const connectionResult = await this.testConnection();
    if (!connectionResult.success) {
      this.printSummary();
      return;
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–æ–≤
    await this.testMenuSheet();
    await this.testOrdersSheet(); 
    await this.testUsersSheet();
    await this.testWriteOperation();

    this.printSummary();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  const tester = new SheetsTestRunner();
  tester.run().catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = SheetsTestRunner;