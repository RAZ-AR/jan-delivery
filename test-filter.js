// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –º–µ–Ω—é
require('dotenv').config({ path: './.env' });

async function testFilter() {
  try {
    const menuService = require('./backend/src/services/menuService.js');
    
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –º–µ–Ω—é...');
    
    const allItems = await menuService.getAllItems('ru');
    console.log(`üìä –í—Å–µ–≥–æ –±–ª—é–¥ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${allItems.length}`);
    
    // –§–∏–ª—å—Ç—Ä –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
    const filtered = allItems.filter(item => item.available && item.name && item.name.trim() !== '');
    console.log(`‚úÖ –ë–ª—é–¥ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${filtered.length}`);
    
    // –ù–∞–π—Ç–∏ –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä
    const rejected = allItems.filter(item => !(item.available && item.name && item.name.trim() !== ''));
    console.log(`‚ùå –ë–ª—é–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${rejected.length}`);
    
    if (rejected.length > 0) {
      console.log('\nüö´ –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –±–ª—é–¥–∞:');
      rejected.forEach((item, index) => {
        console.log(`${index + 1}. ID: ${item.id}`);
        console.log(`   Name: "${item.name}"`);
        console.log(`   Available: ${item.available}`);
        console.log(`   Category: ${item.category}`);
        console.log(`   ---`);
      });
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    const notAvailable = allItems.filter(item => !item.available);
    const noName = allItems.filter(item => !item.name || item.name.trim() === '');
    
    console.log(`\nüìà –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:`);
    console.log(`   –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ (available = false): ${notAvailable.length}`);
    console.log(`   –ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${noName.length}`);
    
    if (noName.length > 0) {
      console.log('\nüìù –ë–ª—é–¥–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–π:');
      noName.slice(0, 5).forEach(item => {
        console.log(`   ID: ${item.id}, Name: "${item.name}", Category: ${item.category}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

testFilter();