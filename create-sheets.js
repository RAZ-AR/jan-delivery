#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π Google –¢–∞–±–ª–∏—Ü—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
 */

require('dotenv').config();
const { google } = require('./backend/node_modules/googleapis');

async function createDeliverySpreadsheet() {
  try {
    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π Google –¢–∞–±–ª–∏—Ü—ã –¥–ª—è JAN Delivery...\n');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API
    const auth = new google.auth.GoogleAuth({
      credentials: {
        client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
        private_key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n')
      },
      scopes: ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
    });

    const sheets = google.sheets({ version: 'v4', auth });

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
    const spreadsheet = await sheets.spreadsheets.create({
      resource: {
        properties: {
          title: 'JAN Delivery Database'
        },
        sheets: [
          {
            properties: {
              title: 'Menu',
              gridProperties: {
                rowCount: 1000,
                columnCount: 10
              }
            }
          },
          {
            properties: {
              title: 'Orders',
              gridProperties: {
                rowCount: 1000,
                columnCount: 12
              }
            }
          },
          {
            properties: {
              title: 'Users',
              gridProperties: {
                rowCount: 1000,
                columnCount: 9
              }
            }
          }
        ]
      }
    });

    const spreadsheetId = spreadsheet.data.spreadsheetId;
    console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: ${spreadsheetId}`);
    console.log(`üìä URL: https://docs.google.com/spreadsheets/d/${spreadsheetId}/edit`);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –ª–∏—Å—Ç–∞ Menu
    await sheets.spreadsheets.values.update({
      spreadsheetId,
      range: 'Menu!A1:J1',
      valueInputOption: 'USER_ENTERED',
      resource: {
        values: [[
          'id', 'name', 'description', 'price', 'category', 
          'image', 'available', 'ingredients', 'weight', 'calories'
        ]]
      }
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –ª–∏—Å—Ç–∞ Orders
    await sheets.spreadsheets.values.update({
      spreadsheetId,
      range: 'Orders!A1:L1',
      valueInputOption: 'USER_ENTERED',
      resource: {
        values: [[
          'id', 'userId', 'userInfo', 'items', 'total', 'address',
          'coordinates', 'status', 'createdAt', 'estimatedDelivery', 'phone', 'notes'
        ]]
      }
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –ª–∏—Å—Ç–∞ Users
    await sheets.spreadsheets.values.update({
      spreadsheetId,
      range: 'Users!A1:I1',
      valueInputOption: 'USER_ENTERED',
      resource: {
        values: [[
          'userId', 'first_name', 'last_name', 'username', 'language_code',
          'phone', 'address', 'createdAt', 'updatedAt'
        ]]
      }
    });

    console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤–æ –≤—Å–µ –ª–∏—Å—Ç—ã');

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Menu
    await sheets.spreadsheets.values.append({
      spreadsheetId,
      range: 'Menu!A:J',
      valueInputOption: 'USER_ENTERED',
      resource: {
        values: [
          ['1', '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–∏—Ü—Ü–∞ —Å —Ç–æ–º–∞—Ç–∞–º–∏ –∏ –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π', 450, '–ü–∏—Ü—Ü–∞', '', 'TRUE', '—Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –±–∞–∑–∏–ª–∏–∫', '350–≥', 280],
          ['2', '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏', '–ü–∏—Ü—Ü–∞ —Å –æ—Å—Ç—Ä–æ–π —Å–∞–ª—è–º–∏ –ø–µ–ø–ø–µ—Ä–æ–Ω–∏', 520, '–ü–∏—Ü—Ü–∞', '', 'TRUE', '—Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –ø–µ–ø–ø–µ—Ä–æ–Ω–∏', '380–≥', 320],
          ['3', '–¶–µ–∑–∞—Ä—å', '–°–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π –∏ –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º', 380, '–°–∞–ª–∞—Ç—ã', '', 'TRUE', '–∫—É—Ä–∏—Ü–∞, —Å–∞–ª–∞—Ç, –ø–∞—Ä–º–µ–∑–∞–Ω, —Å–æ—É—Å —Ü–µ–∑–∞—Ä—å', '250–≥', 220],
          ['4', '–ö–æ–ª–∞', 'Coca-Cola 0.5–ª', 120, '–ù–∞–ø–∏—Ç–∫–∏', '', 'TRUE', '', '0.5–ª', 210],
          ['5', '–ë–æ—Ä—â', '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π –±–æ—Ä—â —Å–æ —Å–º–µ—Ç–∞–Ω–æ–π', 280, '–°—É–ø—ã', '', 'TRUE', '—Å–≤–µ–∫–ª–∞, –∫–∞–ø—É—Å—Ç–∞, –º–æ—Ä–∫–æ–≤—å, –º—è—Å–æ, —Å–º–µ—Ç–∞–Ω–∞', '300–≥', 180]
        ]
      }
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Menu');

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    await sheets.spreadsheets.batchUpdate({
      spreadsheetId,
      resource: {
        requests: [
          // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
          {
            repeatCell: {
              range: {
                sheetId: 0, // Menu sheet
                startRowIndex: 0,
                endRowIndex: 1
              },
              cell: {
                userEnteredFormat: {
                  textFormat: {
                    bold: true
                  },
                  backgroundColor: {
                    red: 0.9,
                    green: 0.9,
                    blue: 0.9
                  }
                }
              },
              fields: 'userEnteredFormat(textFormat,backgroundColor)'
            }
          },
          {
            repeatCell: {
              range: {
                sheetId: 1, // Orders sheet
                startRowIndex: 0,
                endRowIndex: 1
              },
              cell: {
                userEnteredFormat: {
                  textFormat: {
                    bold: true
                  },
                  backgroundColor: {
                    red: 0.9,
                    green: 0.9,
                    blue: 0.9
                  }
                }
              },
              fields: 'userEnteredFormat(textFormat,backgroundColor)'
            }
          },
          {
            repeatCell: {
              range: {
                sheetId: 2, // Users sheet
                startRowIndex: 0,
                endRowIndex: 1
              },
              cell: {
                userEnteredFormat: {
                  textFormat: {
                    bold: true
                  },
                  backgroundColor: {
                    red: 0.9,
                    green: 0.9,
                    blue: 0.9
                  }
                }
              },
              fields: 'userEnteredFormat(textFormat,backgroundColor)'
            }
          }
        ]
      }
    });

    console.log('‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—É–±–ª–∏—á–Ω–æ–π)
    const drive = google.drive({ version: 'v3', auth });
    await drive.permissions.create({
      fileId: spreadsheetId,
      resource: {
        role: 'writer',
        type: 'anyone'
      }
    });

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–∞–∫ –ø—É–±–ª–∏—á–Ω–∞—è (–¥–æ—Å—Ç—É–ø –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)');

    console.log('\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª:');
    console.log(`GOOGLE_SHEETS_ID=${spreadsheetId}`);
    console.log('\n–¢–∞–±–ª–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');

    return spreadsheetId;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', error.message);
    return null;
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  createDeliverySpreadsheet().catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = createDeliverySpreadsheet;